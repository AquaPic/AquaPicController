#!/bin/bash

. ./defines.build

if [ $BUILD ]; then
    config=$BUILD
else
    config=Release
fi

output=$($NUGET 2> /dev/null)
regex="Version: ([3-9].|[1-9][0-9]|2.[1-9][2-9])"

# Checking if NuGet exists and is greater than version 2.12
if [[ ! $output =~ $regex ]]; then 
    cat << stop
Nuget is not installed or too early of a version. Must be at least version 2.12.
Recommend not installing though a package manager. Instead, install mono-complete
and directly download nuget using wget. 
  sudo apt install mono-complete
  wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
Then edit defines.build to use the mono runtime to execute nuget.exe. 
  NUGET="mono /home/user/bin/nuget.exe"
nuget.exe doesn't need to be marked executable but mono does require the absolute
path. The NUGET variable value should be incapsulated in double quoutes.
stop
    exit 1
fi

echo Using \'$NUGET\' as the NuGet command

# Checking if MSBuild exists 
if [[ ! $($MSBUILD /version 2> /dev/null) || ! $MSBUILD ]]; then
    echo Searching for already installed MSBuild...
    msbuild=$(find / -name "MSBuild.exe" 2> /dev/null | grep Unix )
    if [ -z "$msbuild" ]; then
        echo MSBuild was not found. Using NuGet to install MSBuild within the current directory.
        $NUGET install msbuild -OutputDirectory packages
        msbuild=$(find . -name "MSBuild.exe" | grep Unix)
    fi
    
    # Find might return a couple instances of MSBuild, but we only need one
    if [[ $(echo $msbuild | egrep '[^\s] [^\s]') ]]; then
        echo list: $msbuild
        list=($msbuild)
        msbuild=${list[0]}
    fi
    msbuild="mono $msbuild"
else
    msbuild=$MSBUILD
fi

echo Using \'$msbuild\' as the MSBuild command

echo ----------------------------------------------------------------------------------
echo Installing dependencies...
$NUGET install AquaPic/packages.config -OutputDirectory packages

echo ----------------------------------------------------------------------------------
echo Building AquaPic...
$msbuild /p:Configuration=$config AquaPic/AquaPic.csproj 

echo ----------------------------------------------------------------------------------
echo Cleaning up...
if [ $config == "Release" ]; then
    output_directory='AquaPic/bin/Release'
else
    output_directory='AquaPic/bin/Debug'
fi

# Can't figure out how to prevent MSBuild from copying GTK libraries to the output directory. 
# Leaving the *.dll in the direcotry screws up mono's library lookup
rm -f $output_directory/atk-sharp.dll $output_directory/gdk-sharp.dll $output_directory/glib-sharp.dll $output_directory/gtk-sharp.dll $output_directory/pango-sharp.dll

rm -f AquaPic.run
cat << stop > AquaPic.run
#!/bin/sh
mono $output_directory/AquaPic.exe "\$@"
stop
chmod +x AquaPic.run

echo ----------------------------------------------------------------------------------
echo Finished building the AquaPic Controller
echo The application can be launched by running AquaPic.run
